import worker, {
  JsTransformerConfig,
  JsTransformOptions,
  TransformResponse,
} from "metro-transform-worker";
import path from "path";
import { writeFile } from "fs/promises";

import { transform as cssInteropTransform } from "react-native-css-interop/metro/transformer";

interface NativeWindJsTransformerConfig extends JsTransformerConfig {
  transformerPath?: string;
  nativewind: {
    input: string;
    output: string;
  };
}

export async function transform(
  config: NativeWindJsTransformerConfig,
  projectRoot: string,
  filename: string,
  data: Buffer,
  options: JsTransformOptions,
): Promise<TransformResponse> {
  // If we are importing the .css file, make it an alias for the output generated by Tailwind CLI
  if (path.resolve(process.cwd(), filename) === config.nativewind.input) {
    // Ensure the file exists. The file is being generted by a external process, so we cannot do two calls, otherwise
    // we may override the generated CSS
    // This will error if the file does exist, so just ignore errors
    await writeFile(config.nativewind.output, "", {
      mode: "wx",
    }).catch(() => undefined);

    // Parse this as JavaScript. Change the data to include the polyfill and point to the output
    return worker.transform(
      config,
      projectRoot,
      filename,
      Buffer.from(
        `require("react-native-css-interop/polyfill");module.exports=require("${config.nativewind.output}");`,
        "utf8",
      ),
      options,
    );
  }

  return cssInteropTransform(config, projectRoot, filename, data, options);
}
